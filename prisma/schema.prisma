// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts    Account[]
    sessions    Session[]
    userWidgets UserWidget[]
    preference  UserPreference?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// -- Table to store widgets
model Widget {
    id             String       @id @default(cuid())
    name           String
    description    String?
    defaultContent String?
    userWidgets    UserWidget[]
}

// -- Table to store user-customized widgets
model UserWidget {
    id        Int @id @default(autoincrement())
    userId    String
    widgetId  String
    positionX Int?
    positionY Int?
    user      User   @relation(fields: [userId], references: [id])
    widget    Widget @relation(fields: [widgetId], references: [id])
}

// -- Table to store user preferences (e.g., theme, units, etc.)
model UserPreference {
    id               Int     @id @default(autoincrement())
    appearance       String?
    temperatureUnits String
    timeFormat       String
    userId           String  @unique
    user             User    @relation(fields: [userId], references: [id])
}
